geom_point(aes(x = test_set$PPM_impurezas, y = test_set$PPM_Porcentaje_Fallas),
colour = 'red') +
geom_line(aes(x = training_set$PPM_impurezas, y = predict(R_lineal, newdata = training_set)),
colour = 'blue') +
ggtitle('Impurezas PF vs Impurezas MP (Test set)') +
xlab('Impurezas MP (PPM)') +
ylab('Impurezas PF (PPM)')
R_lineal
summary(R_lineal)
View(dataset)
View(dataset)
# Simple Linear Regression
setwd("C:/Users/BIO/Google Drive (leorod3321@gmail.com)/2019_LeoWork/Curso_Esp_Calidad_ICESI/Clase_Regresion/1_Regresion_Simple")
# Importing the dataset
dataset = read.csv('Ejercicios_impurezas.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$PPM_Porcentaje_Fallas, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting Simple Linear Regression to the Training set
R_lineal = lm(formula = PPM_Porcentaje_Fallas ~ PPM_impurezas,
data = training_set)
R_lineal
#Info
summary(R_lineal)
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
# Visualising the Training set results
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$PPM_impurezas, y = training_set$PPM_Porcentaje_Fallas),
colour = 'red') +
geom_line(aes(x = training_set$PPM_impurezas, y = predict(R_lineal, newdata = training_set)),
colour = 'blue') +
ggtitle('Impurezas PF vs Impurezas MP (Training set)') +
xlab('Impurezas MP (PPM)') +
ylab('Impurezas PF (PPM)')
# Predicting the Test set results
y_pred = predict(R_lineal, newdata = test_set)
# Visualising the Training set results
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$PPM_impurezas, y = training_set$PPM_Porcentaje_Fallas),
colour = 'red') +
geom_line(aes(x = training_set$PPM_impurezas, y = predict(R_lineal, newdata = training_set)),
colour = 'blue') +
ggtitle('Impurezas PF vs Impurezas MP (Training set)') +
xlab('Impurezas MP (PPM)') +
ylab('Impurezas PF (PPM)')
# Visualising the Test set results
library(ggplot2)
ggplot() +
geom_point(aes(x = test_set$PPM_impurezas, y = test_set$PPM_Porcentaje_Fallas),
colour = 'red') +
geom_line(aes(x = training_set$PPM_impurezas, y = predict(R_lineal, newdata = training_set)),
colour = 'blue') +
ggtitle('Impurezas PF vs Impurezas MP (Test set)') +
xlab('Impurezas MP (PPM)') +
ylab('Impurezas PF (PPM)')
#Residuals
par(mfrow = c(1,1))
residuals_rlin <- rstandard(R_lineal)
adjusted_values_rlin <- fitted(R_lineal)
plot(adjusted_values_rlin, residuals_rlin)
#Revisar normalidad de los errores
qqnorm(residuals_rlin)
qqline(residuals_rlin)
#Normality test Kolmogorov-Smirnov
ks.test(x = residuals_rlin,"pnorm", mean(residuals_rlin), sd(residuals_rlin))
#Normality test Kolmogorov-Smirnov modification test Lilliefors
library("nortest")
lillie.test(x = residuals_rlin)
#Jarque Bera Test
library("tseries")
jarque.bera.test(x = residuals_rlin)
# Multiple Linear Regression
setwd("C:/Users/BIO/Desktop/Data_Analysis_Comparation/Clase_Regresion/2_Regresion_Multiple")
# Importing the dataset
dataset = read.csv('Ejemplo_produc_tem_car.csv')
setwd("C:/Users/BIO/Google Drive (leorod3321@gmail.com)/2019_LeoWork/Curso_Esp_Calidad_ICESI/Clase_Regresion/2_Regresion_Multiple")
# Multiple Linear Regression
setwd("C:/Users/BIO/Google Drive (leorod3321@gmail.com)/2019_LeoWork/Curso_Esp_Calidad_ICESI/Clase_Regresion/2_Regresion_Multiple")
# Importing the dataset
dataset = read.csv('Ejemplo_produc_tem_car.csv')
# Multiple Linear Regression
setwd("C:/Users/BIO/Google Drive (leorod3321@gmail.com)/2019_LeoWork/Curso_Esp_Calidad_ICESI/Clase_Regresion/2_Regresion_Multiple")
# Importing the dataset
dataset = read.csv('Ejemplo_produc_tem_car.csv')
View(dataset)
View(dataset)
# Multiple Linear Regression
setwd("C:/Users/BIO/Google Drive (leorod3321@gmail.com)/2019_LeoWork/Curso_Esp_Calidad_ICESI/Clase_Regresion/2_Regresion_Multiple")
# Importing the dataset
dataset = read.csv('Ejemplo_produc_tem_car.csv')
View(dataset)
View(dataset)
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
names(dataset)
library(caTools)
set.seed(123)
split = sample.split(dataset$Y..Producción, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting Multiple Linear Regression to the Training set
regressor = lm(formula = Y..Producción ~ .,
data = training_set)
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
summary(regressor)
regressor = lm(formula = Y..Producción ~ .,
data = dataset)
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
summary(regressor)
# Fitting Multiple Linear Regression to the Training set
regressor = lm(formula = Y..Producción ~ .,
data = dataset)
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
summary(regressor)
# Multiple Linear Regression
setwd("C:/Users/BIO/Google Drive (leorod3321@gmail.com)/2019_LeoWork/Curso_Esp_Calidad_ICESI/Clase_Regresion/2_Regresion_Multiple")
# Importing the dataset
dataset = read.csv('Ejemplo_produc_tem_car.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Y..Producción, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Multiple Linear Regression
setwd("C:/Users/BIO/Google Drive (leorod3321@gmail.com)/2019_LeoWork/Curso_Esp_Calidad_ICESI/Clase_Regresion/2_Regresion_Multiple")
# Importing the dataset
dataset = read.csv('Ejemplo_produc_tem_car.csv')
# Multiple Linear Regression
setwd("C:/Users/BIO/Google Drive (leorod3321@gmail.com)/2019_LeoWork/Curso_Esp_Calidad_ICESI/Clase_Regresion/2_Regresion_Multiple")
# Importing the dataset
dataset = read.csv('Ejercicio_produc_tem_car.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Y..Producción, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting Multiple Linear Regression to the Training set
regressor = lm(formula = Y..Producción ~ .,
data = dataset)
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
summary(regressor)
View(dataset)
View(dataset)
names(dataset)
dataset$X1_cuadrado=dataset$X1..Carbono^2
dataset$X2_cuadrado=dataset$X2..Temperatura^2
dataset$X1X2=dataset$X1..Carbono*dataset$X2..Temperatura
View(dataset)
summary(regressor)
# Multiple Linear Regression
setwd("C:/Users/BIO/Google Drive (leorod3321@gmail.com)/2019_LeoWork/Curso_Esp_Calidad_ICESI/Clase_Regresion/2_Regresion_Multiple")
# Importing the dataset
dataset = read.csv('Ejercicio_produc_tem_car.csv')
#add moderaciones and cuadratic effects
dataset$X1_cuadrado=dataset$X1..Carbono^2
dataset$X2_cuadrado=dataset$X2..Temperatura^2
dataset$X1X2=dataset$X1..Carbono*dataset$X2..Temperatura
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Y..Producción, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting Multiple Linear Regression to the Training set
regressor = lm(formula = Y..Producción ~ .,
data = dataset)
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
summary(regressor)
# Multiple Linear Regression
setwd("C:/Users/BIO/Google Drive (leorod3321@gmail.com)/2019_LeoWork/Curso_Esp_Calidad_ICESI/Clase_Regresion/2_Regresion_Multiple")
# Importing the dataset
dataset = read.csv('Ejemplo-esfuerzo-factores.csv')
names(dataset)
# Multiple Linear Regression
setwd("C:/Users/BIO/Google Drive (leorod3321@gmail.com)/2019_LeoWork/Curso_Esp_Calidad_ICESI/Clase_Regresion/2_Regresion_Multiple")
# Importing the dataset
dataset = read.csv('Ejemplo-esfuerzo-factores.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Y1..ESFUERZO, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting Multiple Linear Regression to the Training set
regressor = lm(formula = Y1..ESFUERZO ~ .,
data = training_set)
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
summary(regressor)
# Plot the actual points
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(regressor)
# Plot the actual points
layout(matrix(c(1),1,1)) # optional 1 graphs/page
#Prediction vs actual behavior
plot(predict(regressor),training_set$Profit,
col = "blue", pch=1,
xlab="Prediction",ylab="Real", main="Prediction vs actual behavior")
abline(a=0,b=1, col=153, lty=5)
#Prediction vs actual behavior
plot(predict(regressor),training_set$Y1..ESFUERZO,
col = "blue", pch=1,
xlab="Prediction",ylab="Real", main="Prediction vs actual behavior")
abline(a=0,b=1, col=153, lty=5)
# Multiple Linear Regression
setwd("C:/Users/BIO/Google Drive (leorod3321@gmail.com)/2019_LeoWork/Curso_Esp_Calidad_ICESI/Clase_Regresion/2_Regresion_Multiple")
# Importing the dataset
dataset = read.csv('Ejemplo-esfuerzo-factores.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Y1..ESFUERZO, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting Multiple Linear Regression to the Training set
regressor = lm(formula = Y1..ESFUERZO ~ .,
data = training_set)
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
summary(regressor)
# Plot the actual points
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(regressor)
# Plot the actual points
layout(matrix(c(1),1,1)) # optional 1 graphs/page
#Prediction vs actual behavior
plot(predict(regressor),training_set$Y1..ESFUERZO,
col = "blue", pch=1,
xlab="Prediction",ylab="Real", main="Prediction vs actual behavior")
abline(a=0,b=1, col=153, lty=5)
# Multiple Linear Regression
setwd("C:/Users/BIO/Google Drive (leorod3321@gmail.com)/2019_LeoWork/Curso_Esp_Calidad_ICESI/Clase_Regresion/2_Regresion_Multiple")
# Importing the dataset
dataset = read.csv('Ejemplo-esfuerzo-factores.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Y1..ESFUERZO, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting Multiple Linear Regression to the Training set
regressor = lm(formula = Y1..ESFUERZO ~ .,
data = training_set)
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
summary(regressor)
# Plot the actual points
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(regressor)
# Plot the actual points
layout(matrix(c(1),1,1)) # optional 1 graphs/page
#Prediction vs actual behavior
plot(predict(regressor),training_set$Y1..ESFUERZO,
col = "blue", pch=1,
xlab="Prediction",ylab="Real", main="Prediction vs actual behavior")
abline(a=0,b=1, col=153, lty=5)
#Predict residuals
residuals<-rstandard(regressor)
hist(residuals)
boxplot(residuals, boxwex = 0.5, col = c("blue", "red"),
main = "Box",
xlab = "Error", ylab = "length",
sep = ":", lex.order = TRUE, ylim = c(-3, 3), yaxs = "i")
#Residuals
par(mfrow = c(1,1))
adjusted_values_rmul <- fitted(regressor)
plot(adjusted_values_rmul, residuals)
# Multiple Linear Regression
setwd("C:/Users/BIO/Google Drive (leorod3321@gmail.com)/2019_LeoWork/Curso_Esp_Calidad_ICESI/Clase_Regresion/2_Regresion_Multiple")
# Importing the dataset
dataset = read.csv('Ejemplo-esfuerzo-factores.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Y1..ESFUERZO, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting Multiple Linear Regression to the Training set
regressor = lm(formula = Y1..ESFUERZO ~ .,
data = training_set)
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
summary(regressor)
# Plot the actual points
layout(matrix(c(1,2,3,4),2,2)) # optional 4 graphs/page
plot(regressor)
# Plot the actual points
layout(matrix(c(1),1,1)) # optional 1 graphs/page
#Prediction vs actual behavior
plot(predict(regressor),training_set$Y1..ESFUERZO,
col = "blue", pch=1,
xlab="Prediction",ylab="Real", main="Prediction vs actual behavior")
abline(a=0,b=1, col=153, lty=5)
#Predict residuals
residuals<-rstandard(regressor)
hist(residuals)
boxplot(residuals, boxwex = 0.5, col = c("blue", "red"),
main = "Box",
xlab = "Error", ylab = "length",
sep = ":", lex.order = TRUE, ylim = c(-3, 3), yaxs = "i")
#Residuals
par(mfrow = c(1,1))
adjusted_values_rmul <- fitted(regressor)
plot(adjusted_values_rmul, residuals)
#Revisar normalidad de los errores
qqnorm(residuals_rlin)
qqline(residuals_rlin)
#Revisar normalidad de los errores
qqnorm(residuals)
qqline(residuals)
#Residuals
par(mfrow = c(1,1))
adjusted_values_rmul <- fitted(regressor)
plot(adjusted_values_rmul, residuals)
#Revisar normalidad de los errores
qqnorm(residuals)
qqline(residuals)
#Set wd
setwd("C:/Users/BIO/Desktop/Data_Analysis_Comparation/Clase_Datos")
# Importing the dataset
dataset = read.csv('Data_des_sta.csv')
#Drop variable
library(dplyr)
dataset <- select(dataset, -X)
# Encoding categorical data
dataset$State = factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
#Descriptive Statistics
summary(dataset)
#Correlation
pairs(dataset)
# Using Pairs
pairs(dataset, labels = colnames(dataset), main = "Pairs matrix",
pch = 21, bg = c("red", "blue",
"yellow")[unclass(dataset$State)],
upper.panel = NULL)
#Many ways
dataset_draff <- dataset
# Or
#dataset_draff = dataset[, c("Quality.Spend", "Administration", "Marketing.Spend", "Profit")]
#Drop variable
dataset_draff <- select(dataset_draff, -State)
#Correlation
pairs(dataset_draff)
# Using Pairs
pairs(dataset_draff, labels = colnames(dataset_draff), main = "Pairs matrix", pch = 21,
bg = c("red", "blue", "yellow")[unclass(dataset$State)], upper.panel = NULL)
#Set wd
setwd("C:/Users/BIO/Desktop/Data_Analysis_Comparation/Clase_Datos")
# Importing the dataset
dataset = read.csv('Data_des_sta.csv')
#Drop variable
library(dplyr)
dataset <- select(dataset, -X)
# Encoding categorical data
dataset$State = factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
#Descriptive Statistics
summary(dataset)
pairs(dataset)
#Many ways
dataset_draff <- dataset
# Or
#dataset_draff = dataset[, c("Quality.Spend", "Administration", "Marketing.Spend", "Profit")]
#Drop variable
dataset_draff <- select(dataset_draff, -State)
#Correlation
pairs(dataset_draff)
# Using Pairs
pairs(dataset_draff, labels = colnames(dataset_draff), main = "Pairs matrix", pch = 21,
bg = c("red", "blue", "yellow")[unclass(dataset$State)], upper.panel = NULL)
# Organice Setwd
setwd("C:/Users/BIO/Desktop/Data_Analysis_Comparation/Clase_Datos")
# Importing the dataset
#Hay que traer a la misma carpeta el documento original
dataset = read.csv('Data_raw.csv')
#Install dplyr
library(dplyr)
#Borrar una columna
dataset <- select(dataset, -X)
colnames(dataset)[colnames(dataset)=="Q.Spend"] <- "Quality.Spend"
View(dataset)
View(dataset)
#Set wd
setwd("C:/Users/BIO/Desktop/Data_Analysis_Comparation/Clase_Datos")
# Importing the dataset
dataset = read.csv('Data_des_sta.csv')
#Drop variable
library(dplyr)
dataset <- select(dataset, -X)
# Encoding categorical data
dataset$State = factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
View(dataset)
View(dataset)
#Set wd
setwd("C:/Users/BIO/Desktop/Data_Analysis_Comparation/Clase_Datos")
# Importing the dataset
dataset = read.csv('Data_des_sta.csv')
#Drop variable
library(dplyr)
dataset <- select(dataset, -X)
# Encoding categorical data
dataset$State = factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
#Descriptive Statistics
summary(dataset)
#Correlation
pairs(dataset)
# Using Pairs
pairs(dataset, labels = colnames(dataset), main = "Pairs matrix",
pch = 21, bg = c("red", "blue",
"yellow")[unclass(dataset$State)],
upper.panel = NULL)
#Many ways
dataset_draff <- dataset
# Or
#dataset_draff = dataset[, c("Quality.Spend", "Administration", "Marketing.Spend", "Profit")]
#Drop variable
dataset_draff <- select(dataset_draff, -State)
#Correlation
pairs(dataset_draff)
# Using Pairs
pairs(dataset_draff, labels = colnames(dataset_draff), main = "Pairs matrix", pch = 21,
bg = c("red", "blue", "yellow")[unclass(dataset$State)], upper.panel = NULL)
#Set wd
setwd("C:/Users/BIO/Desktop/Data_Analysis_Comparation/Clase_Datos")
# Importing the dataset
dataset = read.csv('Data_des_sta.csv')
#Drop variable
library(dplyr)
dataset <- select(dataset, -X)
# Encoding categorical data
dataset$State = factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
#Histogram
#Hist freq
hist(dataset$Profit)
#Hist density
hist(dataset$Profit,freq=FALSE, col="chartreuse")
#Addm title
hist(dataset$Profit,freq=FALSE, col="chartreuse", main="Histogram of profit", xlab="")
lines(density(dataset$Profit),col="red",lwd=2)
curve(dnorm(x,mean=mean(dataset$Profit),sd=sd(dataset$Profit)), from=0,to=200000,
add=TRUE, col="blue", lwd=2)
legend("topleft",col=c("blue","red"),legend =c("Estimated normal density","Density core estimator"),lwd=2, bty = "n")
#Comparison
plot(density(dataset$Administration), xlim = c(0, 250000), col = "blue", main="Comparison")
lines(density(dataset$Quality.Spend), col = "red")
#Set wd
setwd("C:/Users/BIO/Desktop/Data_Analysis_Comparation/Clase_Datos")
# Import csv
dataset = read.csv('Data_Missing.csv')
#Add the average
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
